import tkinter as tk
from tkinter import ttk
import configparser
import os
from datetime import datetime, date
from tkcalendar import Calendar # pip install tkcalendar
from ttkthemes import ThemedTk, ThemedStyle

CONFIG_FILE = "config_notes.ini"
config = configparser.ConfigParser()
notes = {}
current_selected_date = "" # Khởi tạo toàn cục, vì nó được sử dụng trước khi hàm thiết lập nó

def clock():
    global notes, current_selected_date # Khai báo sử dụng toàn cục ở đây

    if not root:
        return

    def load_notes():
        if not os.path.exists(CONFIG_FILE):
            return {}
        config.read(CONFIG_FILE)
        # Sử dụng khối try-except để phân tích cú pháp an toàn hơn trong trường hợp tệp INI bị định dạng sai
        try:
            return {section: config[section].get("note", "") for section in config.sections() if section != "Settings"}
        except configparser.NoOptionError:
            print(f"Cảnh báo: Tệp cấu hình '{CONFIG_FILE}' bị định dạng sai. Một số phần có thể thiếu tùy chọn 'note'.")
            return {section: "" for section in config.sections() if section != "Settings"}


    def save_notes():
        config.read(CONFIG_FILE) # Đọc trạng thái hiện tại để giữ lại các phần khác
        settings = config["Settings"] if "Settings" in config else {}
        config_to_write = configparser.ConfigParser() # Sử dụng một trình phân tích cú pháp mới để ghi
        if settings:
            config_to_write["Settings"] = settings
        for date_key, note_value in notes.items():
            config_to_write[date_key] = {"note": note_value}
        try:
            with open(CONFIG_FILE, "w") as file:
                config_to_write.write(file)
        except IOError as e:
            print(f"Lỗi khi lưu ghi chú vào {CONFIG_FILE}: {e}")

    def update_clock():
        hom_nay_label.config(text=f"Ngày hôm nay: {datetime.now().strftime('%d-%m-%Y')}")
        thoi_gian_label.config(text=f"Thời gian: {datetime.now().strftime('%H:%M:%S')}")
        root.after(1000, update_clock)

    def update_calendar_highlight():
        today = date.today()
        events = cal.get_calevents()
        already_exists = any(cal.calevent_cget(ev_id, "text") == "Hôm nay" for ev_id in events)

        if not already_exists:
            cal.calevent_create(today, "Hôm nay", "highlight")

        cal.tag_config("highlight", background="lightblue", foreground="black")
        # Không cần lên lịch hàng giây. Hàng ngày là đủ.
        root.after(86400000, update_calendar_highlight)

    def on_date_selected(event=None):
        global current_selected_date
        save_notes()
        selected_date_obj = cal.selection_get()
        current_selected_date = selected_date_obj.strftime("%Y-%m-%d")
        update_selected_date_display()

    def update_selected_date_display():
        note_date_label.config(text=current_selected_date)
        note_text.delete(1.0, tk.END)
        note_text.insert(1.0, notes.get(current_selected_date, ""))

    def auto_save_note(event=None):
        notes[current_selected_date] = note_text.get(1.0, tk.END).strip()
        save_notes()

    tinh_nang_1 = tk.Toplevel(root)
    tinh_nang_1.title("Chọn chủ đề")
    tinh_nang_1.resizable(False, False)

    style = ThemedStyle(tinh_nang_1)
    style.set_theme("arc")
    theme_bg_color = style.lookup(".", "background") or "#F0F0F0"
    tinh_nang_1.config(bg=theme_bg_color)

    main_frame = ttk.Frame(tinh_nang_1, padding="10")
    main_frame.grid(row=0, column=0, sticky="nsew")
    tinh_nang_1.grid_rowconfigure(0, weight=1)
    tinh_nang_1.grid_columnconfigure(0, weight=1)

    notes = load_notes()
    current_selected_date = datetime.now().strftime("%Y-%m-%d")

    # Khung Ghi chú
    notes_frame = ttk.Frame(main_frame, padding="10", relief="groove", borderwidth=2)
    notes_frame.grid(row=0, column=0, sticky="nsew", padx=5, pady=5)
    main_frame.grid_rowconfigure(0, weight=1)
    main_frame.grid_columnconfigure(0, weight=1)

    ttk.Label(notes_frame, text="Ghi chú:", font=("Helvetica", 12, "bold")).grid(row=0, column=0, pady=5, sticky="w")
    note_date_label = ttk.Label(notes_frame, text=current_selected_date, font=("Helvetica", 10))
    note_date_label.grid(row=1, column=0, pady=2, sticky="w")

    text_frame = ttk.Frame(notes_frame)
    text_frame.grid(row=2, column=0, pady=5, sticky="nsew")
    notes_frame.grid_rowconfigure(2, weight=1)
    notes_frame.grid_columnconfigure(0, weight=1)

    note_text = tk.Text(text_frame, width=40, height=15, wrap="word", font=("Helvetica", 10))
    note_text.grid(row=0, column=0, sticky="nsew")
    text_frame.grid_rowconfigure(0, weight=1)
    text_frame.grid_columnconfigure(0, weight=1)

    scrollbar = ttk.Scrollbar(text_frame, command=note_text.yview)
    scrollbar.grid(row=0, column=1, sticky="ns")
    note_text.config(yscrollcommand=scrollbar.set)
    note_text.bind("<KeyRelease>", auto_save_note)

    # Khung Đồng hồ và Lịch
    clock_calendar_frame = ttk.Frame(main_frame, padding="10", relief="groove", borderwidth=2)
    clock_calendar_frame.grid(row=0, column=1, sticky="nsew", padx=5, pady=5)
    main_frame.grid_rowconfigure(0, weight=1)
    main_frame.grid_columnconfigure(1, weight=1)

    ttk.Label(clock_calendar_frame, text="Đồng hồ", font=("Helvetica", 14, "bold")).grid(row=0, column=0, pady=5, sticky="n")
    hom_nay_label = ttk.Label(clock_calendar_frame, text="", font=("Helvetica", 12))
    hom_nay_label.grid(row=1, column=0, pady=2, sticky="n")
    thoi_gian_label = ttk.Label(clock_calendar_frame, text="", font=("Helvetica", 24, "bold"))
    thoi_gian_label.grid(row=2, column=0, pady=5, sticky="n")

    ttk.Label(clock_calendar_frame, text="Lịch", font=("Helvetica", 14, "bold")).grid(row=3, column=0, pady=5, sticky="n")
    cal = Calendar(clock_calendar_frame, selectmode="day", date_pattern="yyyy-mm-dd")
    cal.grid(row=4, column=0, pady=5, sticky="nsew")
    clock_calendar_frame.grid_rowconfigure(4, weight=1)
    clock_calendar_frame.grid_columnconfigure(0, weight=1)
    cal.bind("<<CalendarSelected>>", on_date_selected)

    update_calendar_highlight()
    update_clock()
    update_selected_date_display()
    open_toplevels.append(tinh_nang_1)
    tinh_nang_1.protocol("WM_DELETE_WINDOW", lambda: on_toplevel_close(tinh_nang_1))


def camera():
    print("Mở Máy ảnh")
    # Add your camera functionality here

def gui_thu():
    print("Mở Gửi thư")
    # Add your email sending functionality here

def may_tinh():
    print("Mở Máy tính")
    # Add your calculator functionality here

def chuyen_am_thanh_thanh_van_ban():
    print("Mở Chuyển âm thanh thành văn bản")
    # Add your speech-to-text functionality here

def tim_kiem_thong_tin():
    print("Mở Tìm kiếm thông tin")
    # Add your information search functionality here

def dem_nguoc():
    print("Mở Đồng hồ đếm ngược")
    # Add your countdown timer functionality here

def may_phat_nhac_va_video():
    print("Mở Máy phát nhạc và video")
    # Add your media player functionality here

def van_ban():
    print("Mở Viết văn bản")
    # Add your text editor functionality here

def thoi_tiet():
    print("Mở Thời tiết")
    # Add your weather functionality here

# Tính năng 11: Thay đổi giao diện người dùng
    # Biến toàn cục và danh sách chủ để cho tính năng giao diện
CONFIG_FILE = "thiet_lap_giao_dien.ini"
available_themes = ["equilux", "radiance", "arc", "breeze", "ubuntu", "yaru", "plastik",
                    "clam", "alt", "default", "classic", "adapta", "aquativo", "clearlooks",
                    "elegance", "itft1", "keramik", "kroc", "nutmeg", "smog", "winnative", "xpnative"] # Các chủ đề có sẵn của ttkthemes

def load_theme_setting(): # Đọc chủ đề hiện tại trong file
    config = configparser.ConfigParser()
    config.read(CONFIG_FILE)
    if 'Settings' in config and 'theme' in config['Settings']:
        return config['Settings']['theme']
    return available_themes[0] # Chủ đề mặc định nếu chưa có

def save_theme_setting(theme): # Lưu chủ để hiện tại 
    config = configparser.ConfigParser()
    config.read(CONFIG_FILE) # Đọc các cài đặt hiện có
    if 'Settings' not in config:
        config['Settings'] = {}
    config['Settings']['theme'] = theme
    with open(CONFIG_FILE, 'w') as configfile:
        config.write(configfile)

current_theme = load_theme_setting() # Nơi chứa chủ đề đang được sử dụng
open_toplevels = []  # Nơi chứa các toplevel đang hoạt động 

def apply_theme(theme): # Áp dụng chủ đề cho cửa sổ root và tất cả cửa sổ con.
    global current_theme, root # Khai báo nó sẽ sử dụng và thay đổi các biến toàn cục và root (cái này để sau đi lười giải thích -___-)
    current_theme = theme  # Cập nhập biến theme bằng current_theme đã chọn
    if root:
        style = ThemedStyle(root)  # Tạo 1 đối tượng "ThemedStyle" để liên kết với root
        style.set_theme(theme) # Áp dụng chủ đề được truyền vào (theme) cho cửa sổ root

        theme_bg_color = style.lookup(".", "background") or "#F0F0F0" # Dùng màu của chủ đề để làm màu nền nếu không tìm đc thì dùng màu #F0F0F0 màu nàu cố thể thay đỏi tùy theo nhu cầu
        root.config(bg=theme_bg_color) # Đặt màu nền cho cửa sổ chính

        for top in open_toplevels[:]: # Lặp lại danh sách để tăng độ an toàn và ổn định (1 bộ phận quan trọng đó, xóa đi thì...)
            if top.winfo_exists(): #  Kiểm tra xem cửa sổ phụ top có còn tồn tại (chưa bị đóng) hay không
                top_style = ThemedStyle(top) # Tạo một đối tượng ThemedStyle riêng cho từng cửa sổ phụ
                top_style.set_theme(theme) #  Áp dụng chủ đề cho cửa sổ phụ hiện tại
                top.config(bg=theme_bg_color) # Đặt màu nền cho cửa sổ phụ
            else: 
                open_toplevels.remove(top) # Xóa cửa sộ phụ đã đóng hoặc không tồn tại ra khỏi danh sách
    save_theme_setting(theme) # Lưu chủ đề sau khi áp dụng thành công

def giao_dien (): # Mở cửa sổ chọn chủ đề.
    if not root: # 2 Dòng này nhằm đảm bảo cảu sổ chính tồn tại 
        return
    # Tạo cửa sổ phụ cho tính năng 11     
    tinh_nang_11 = tk.Toplevel(root) # liên kết với của sổ chính bằng root
    tinh_nang_11.title("Chọn chủ đề") # Thiết lập tên cho cửa sổ
    tinh_nang_11.geometry("300x180") # Thiết lập kích thước
    tinh_nang_11.resizable(False, False) # Loại bỏ khả năng thu phóng cảu cửa sổ
    # Đoạn này dùng để thay đổi giao diện 
    style = ThemedStyle(tinh_nang_11)
    style.set_theme(current_theme)
    theme_bg_color = style.lookup(".", "background") or "#F0F0F0"
    tinh_nang_11.config(bg=theme_bg_color)

    ttk.Label(tinh_nang_11, text="Chọn chế độ giao diện:", font=("Arial", 12, "bold")).pack(pady=10)

    theme_combobox = ttk.Combobox(tinh_nang_11, values=available_themes, state="readonly")
    theme_combobox.pack(pady=5, padx=10)
    theme_combobox.set(current_theme)
    # dùng để tạo 1 ô để hiển thị thông báo 
    status_label = ttk.Label(tinh_nang_11, text="", font=("Arial", 10), foreground="green") 
    status_label.pack(pady=5)

    def apply_and_confirm(): # Dùng để thông báo đã thay đổi thành công
        new_theme = theme_combobox.get()
        apply_theme(new_theme)
        status_label.config(text="Đã áp dụng chủ đề!")
        tinh_nang_11.after(2000, lambda: status_label.config(text=""))

    ttk.Button(tinh_nang_11, text="Áp dụng", command=apply_and_confirm).pack(pady=10) # Tạo 1 cái nút

    open_toplevels.append(tinh_nang_11)
    tinh_nang_11.protocol("WM_DELETE_WINDOW", lambda: on_toplevel_close(tinh_nang_11))

def on_toplevel_close(window): # Xử lý khi một cửa sổ Toplevel bị đóng.
    if window in open_toplevels:
        open_toplevels.remove(window)
    window.destroy()

#
def bang_tuan_hoan():
    print("Mở Bảng tuần hoàn hóa học")
    # Add your periodic table functionality here
#
def doi_loi():
    print("Mở Đôi lời của nhà sản xuất")

if __name__ == "__main__":

    root = ThemedTk(theme=current_theme)
    root.title("App đa năng")
    root.resizable(False, False)
    frm = ttk.Frame(root, padding=10)
    frm.grid()

    style = ThemedStyle(root)
    style.set_theme(current_theme)
    theme_bg_color = style.lookup(".", "background") or "#F0F0F0"
    root.config(bg=theme_bg_color)

    ttk.Label(frm, text="Menu", anchor="center", font=('Arial', 14, 'bold')).grid(column=0, row=0, columnspan=2, sticky="ew", pady=5) 
    ttk.Button(frm, text="1.Đồng hồ và lịch", command=clock).grid(column=0, row=1, columnspan=2, sticky="ew", pady=2)
    ttk.Button(frm, text="2.Máy ảnh", command=camera).grid(column=0, row=2, columnspan=2, sticky="ew", pady=2)
    ttk.Button(frm, text="3.Gửi thư", command=gui_thu).grid(column=0, row=3, columnspan=2, sticky="ew", pady=2)
    ttk.Button(frm, text="4.Máy tính", command=may_tinh).grid(column=0, row=4, columnspan=2, sticky="ew", pady=2)
    ttk.Button(frm, text="5.Chuyển âm thanh thành văn bản", command=chuyen_am_thanh_thanh_van_ban).grid(column=0, row=5, columnspan=2, sticky="ew", pady=2)
    ttk.Button(frm, text="6.Tìm kiếm thông tin ", command=tim_kiem_thong_tin).grid(column=0, row=6, columnspan=2, sticky="ew", pady=2)
    ttk.Button(frm, text="7. Đồng hồ đếm ngược", command=dem_nguoc).grid(column=0, row=7, columnspan=2, sticky="ew", pady=2)
    ttk.Button(frm, text="8. Máy phát nhạc và video ", command=may_phat_nhac_va_video).grid(column=0, row=8, columnspan=2, sticky="ew", pady=2)
    ttk.Button(frm, text="9. Viết văn bản ", command=van_ban).grid(column=0, row=9, columnspan=2, sticky="ew", pady=2)
    ttk.Button(frm, text="10. Thời tiết", command=thoi_tiet).grid(column=0, row=10, columnspan=2, sticky="ew", pady=2)
    ttk.Button(frm, text="11.Thay đổi giao diện người dùng ", command=giao_dien).grid(column=0, row=11, columnspan=2, sticky="ew", pady=2)
    ttk.Button(frm, text="12.Bảng tuần hoàn hóa học", command=bang_tuan_hoan).grid(column=0, row=12, columnspan=2, sticky="ew", pady=2)
    ttk.Button(frm, text="13. Đôi lời của nhà sản xuất ", command=doi_loi).grid(column=0, row=13, columnspan=2, sticky="ew", pady=2)

    root.mainloop()
